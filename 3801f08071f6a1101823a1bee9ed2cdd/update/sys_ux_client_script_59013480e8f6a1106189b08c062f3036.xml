<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes/>
        <macroponent display_value="Landing page">11013480c4f6a110e36eecf36f58ad39</macroponent>
        <name>PR_calculate_state_values</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {


    const {
        data,
        state,
        setState,
        context
    } = api;

    const propNames = {
        propName1: 'x_398999_perform_0.end_date'
    };

     const {
        snHttp
    } = helpers;

    // To calculate the remaining days to complete the review 
    const prompt_date = snHttp('/api/x_398999_perform_0/prop_mgmt?property_name=' + propNames.propName1, {
        method: 'GET',
        batch: false,
    }).then(response => {

        var now = new Date();
        // returns review date in msec
        var review_date = Date.parse(response.response.result.end_date.toString());
        var diff = review_date - now.getTime();
        var noOfDays = Math.round(diff / (1000 * 60 * 60 * 24)).toFixed(0);
        if (noOfDays > 0)
            setState('moreDays', noOfDays);
       
    }).catch(error => {
        console.log(error.message);
    });

    // To calculate the totalRecCount
    const currentUser = api.context.session.user.sys_id;
    // stats is to do aggregate API, gets the count (sysparm_count)
    snHttp("/api/now/stats/x_398999_perform_0_performance_review?sysparm_count=true&sysparm_query=active=true^manager.sys_id=" + currentUser, {
        method: "GET",
        batch: false,
    }).then(response => {
        if (response.response.result.stats.count > 0) {

            setState('totalRecCount', response.response.result.stats.count);

        }
    }).catch(error => {
        console.log('Error');
    });

    // calculate totalRecConfirmed State
    snHttp("/api/now/stats/x_398999_perform_0_performance_review?sysparm_count=true&sysparm_query=active=true^state=confirmed^manager.sys_id=" + currentUser, {
        method: "GET",
        batch: false,
    }).then(response => {
        if (response.response.result.stats.count > 0) {

            setState('totalRecConfirmed', response.response.result.stats.count);

        }
    }).catch(error => {
        console.log('Error');
    });

    // calculate totalRecInProgress State
    snHttp("/api/now/stats/x_398999_perform_0_performance_review?sysparm_count=true&sysparm_query=active=true^state!=confirmed^state !=draft^manager.sys_id=" + currentUser, {
        method: "GET",
        batch: false,
    }).then(response => {
        if (response.response.result.stats.count > 0) {

            setState('totalRecInProgress', response.response.result.stats.count);

        }
    }).catch(error => {
        console.log('Error');
    });
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-09 08:32:51</sys_created_on>
        <sys_id>59013480e8f6a1106189b08c062f3036</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PR_calculate_state_values</sys_name>
        <sys_package display_value="Performance Review App" source="x_398999_perform_0">3801f08071f6a1101823a1bee9ed2cdd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Performance Review App">3801f08071f6a1101823a1bee9ed2cdd</sys_scope>
        <sys_update_name>sys_ux_client_script_59013480e8f6a1106189b08c062f3036</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-09 08:32:51</sys_updated_on>
        <target/>
        <type/>
    </sys_ux_client_script>
</record_update>
